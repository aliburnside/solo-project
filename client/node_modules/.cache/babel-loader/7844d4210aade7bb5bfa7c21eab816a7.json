{"ast":null,"code":"const baseUrl = 'http://localhost:3002/student';\nexport function getStudents() {\n  return fetchStudents(baseUrl);\n}\nexport function getStudent(id) {\n  return fetchStudents(`${baseUrl}/${id}`, {\n    method: 'GET'\n  });\n} // export function getStudent(name) {\n//   return fetchStudents(`${baseUrl}/${name}`, {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({ name: name }),\n//   });\n// }\n\nexport function importStudents(newSs) {\n  return fetchStudents(`${baseUrl}/multiple`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newSs)\n  });\n}\n/* StudentID, 'completed', Test results\nTestID, 'pending', Students Pending */\n\nexport function updateStudentTests(id, status, updatedData) {\n  return fetchStudents(`${baseUrl}/${status}/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updatedData)\n  });\n}\n\nfunction fetchStudents(url, options) {\n  return fetch(url, options).then(res => {\n    if (res.status < 400) return res;else Promise.reject(res);\n  }).then(res => {\n    if (res.status !== 204) return res.json();else return res;\n  }).catch(err => console.log(err));\n}","map":{"version":3,"sources":["/Users/davidsolsona/Documents/GitHub/Legacy/solo-project/client/src/studentAPI.js"],"names":["baseUrl","getStudents","fetchStudents","getStudent","id","method","importStudents","newSs","headers","body","JSON","stringify","updateStudentTests","status","updatedData","url","options","fetch","then","res","Promise","reject","json","catch","err","console","log"],"mappings":"AAAA,MAAMA,OAAO,GAAG,+BAAhB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAOC,aAAa,CAACF,OAAD,CAApB;AACD;AAED,OAAO,SAASG,UAAT,CAAoBC,EAApB,EAAwB;AAC7B,SAAOF,aAAa,CAAE,GAAEF,OAAQ,IAAGI,EAAG,EAAlB,EAAqB;AACvCC,IAAAA,MAAM,EAAE;AAD+B,GAArB,CAApB;AAGD,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AACpC,SAAOL,aAAa,CAAE,GAAEF,OAAQ,WAAZ,EAAwB;AAC1CK,IAAAA,MAAM,EAAE,MADkC;AAE1CG,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFiC;AAG1CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,KAAf;AAHoC,GAAxB,CAApB;AAKD;AAED;AACA;;AACA,OAAO,SAASK,kBAAT,CAA4BR,EAA5B,EAAgCS,MAAhC,EAAwCC,WAAxC,EAAqD;AAC1D,SAAOZ,aAAa,CAAE,GAAEF,OAAQ,IAAGa,MAAO,IAAGT,EAAG,EAA5B,EAA+B;AACjDC,IAAAA,MAAM,EAAE,KADyC;AAEjDG,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFwC;AAGjDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeG,WAAf;AAH2C,GAA/B,CAApB;AAKD;;AAED,SAASZ,aAAT,CAAuBa,GAAvB,EAA4BC,OAA5B,EAAqC;AACnC,SAAOC,KAAK,CAACF,GAAD,EAAMC,OAAN,CAAL,CACJE,IADI,CACEC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACN,MAAJ,GAAa,GAAjB,EAAsB,OAAOM,GAAP,CAAtB,KACKC,OAAO,CAACC,MAAR,CAAeF,GAAf;AACN,GAJI,EAKJD,IALI,CAKEC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACN,MAAJ,KAAe,GAAnB,EAAwB,OAAOM,GAAG,CAACG,IAAJ,EAAP,CAAxB,KACK,OAAOH,GAAP;AACN,GARI,EASJI,KATI,CASGC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CATX,CAAP;AAUD","sourcesContent":["const baseUrl = 'http://localhost:3002/student';\n\nexport function getStudents() {\n  return fetchStudents(baseUrl);\n}\n\nexport function getStudent(id) {\n  return fetchStudents(`${baseUrl}/${id}`, {\n    method: 'GET',\n  });\n}\n// export function getStudent(name) {\n//   return fetchStudents(`${baseUrl}/${name}`, {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify({ name: name }),\n//   });\n// }\n\nexport function importStudents(newSs) {\n  return fetchStudents(`${baseUrl}/multiple`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(newSs),\n  });\n}\n\n/* StudentID, 'completed', Test results\nTestID, 'pending', Students Pending */\nexport function updateStudentTests(id, status, updatedData) {\n  return fetchStudents(`${baseUrl}/${status}/${id}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(updatedData),\n  });\n}\n\nfunction fetchStudents(url, options) {\n  return fetch(url, options)\n    .then((res) => {\n      if (res.status < 400) return res;\n      else Promise.reject(res);\n    })\n    .then((res) => {\n      if (res.status !== 204) return res.json();\n      else return res;\n    })\n    .catch((err) => console.log(err));\n}\n"]},"metadata":{},"sourceType":"module"}