{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/davidsolsona/Documents/GitHub/Legacy/solo-project/client/src/components/Teacher/TestCreator/TestCreator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport CreateButton from '../../UI/CreateButton/CreateButton';\nimport QuestionCard from './QuestionCard/QuestionCard';\nimport QuestionCreator from './QuestionCreator/QuestionCreator';\nimport { postTest } from '../../../store/actions/testActions';\nimport styles from './TestCreator.module.scss';\n\nconst TestCreator = props => {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState('Test 1');\n  const [isValid, setIsValid] = useState(true);\n  useEffect(() => {\n    // Retrieve questions from storage\n    const item = JSON.parse(localStorage.getItem('currenttest'));\n    if (!item) localStorage.setItem('currenttest', JSON.stringify({}));else {\n      const storedQuestions = [];\n\n      for (let key of Object.keys(item)) {\n        storedQuestions.push(item[key]);\n      }\n\n      if (storedQuestions.length) setQuestions(storedQuestions);\n    }\n  }, []);\n\n  const saveQuestionHandler = q => {\n    // Create question object\n    const letters = ['a', 'b', 'c', 'd'];\n    const options = letters.map(ch => ({\n      op: q[ch].value,\n      correct: false\n    }));\n    const newQuestion = {\n      question: q.question.value,\n      options,\n      answer: q[q.answer.value].value\n    };\n    newQuestion.options.map(opt => opt.correct = opt.op === newQuestion.answer);\n\n    if (q.selectedImage.files[0]) {\n      // SHOW SPINNER\n      const data = new FormData();\n      data.append('file', q.selectedImage.files[0]);\n      data.append('upload_preset', 'learntoday');\n      fetch('https://api.cloudinary.com/v1_1/garmobal/image/upload', {\n        method: 'POST',\n        body: data\n      }).then(res => res.json()).then(res => {\n        newQuestion.image = res.secure_url;\n        setQuestions(currentQ => [...currentQ, newQuestion]);\n        const currenttest = JSON.parse(localStorage.getItem('currenttest'));\n        currenttest[newQuestion.question] = newQuestion;\n        localStorage.setItem('currenttest', JSON.stringify(currenttest)); //HIDE SPINNER\n      });\n    } else {\n      setQuestions(currentQ => [...currentQ, newQuestion]);\n      const currenttest = JSON.parse(localStorage.getItem('currenttest'));\n      currenttest[newQuestion.question] = newQuestion;\n      localStorage.setItem('currenttest', JSON.stringify(currenttest));\n    }\n  };\n\n  const trashHandler = question => {\n    const currenttest = JSON.parse(localStorage.getItem('currenttest'));\n    delete currenttest[question];\n    localStorage.setItem('currenttest', JSON.stringify(currenttest));\n    setQuestions(questions.filter(q => q.question !== question));\n  };\n\n  const titleHandler = e => setTitle(e.target.value);\n\n  const dispatch = useDispatch();\n\n  const submitTestHandler = () => {\n    if (questions.length < 4) setIsValid(false);else {\n      dispatch(postTest(questions, title));\n      localStorage.clear();\n      props.history.replace('/tests');\n    }\n  };\n\n  const addMoreQuestionsMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n    className: isValid ? styles.Hidden : styles.Warning,\n    children: \"Tests must have at least 4 questions and a title\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 36\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.TestCreator,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.QuestionsList,\n      children: questions.length ? questions.map((q, i) => /*#__PURE__*/_jsxDEV(QuestionCard, {\n        quest: q,\n        trashHandler: trashHandler\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.Message,\n        children: \"Start by adding some questions!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuestionCreator, {\n      saveQuestion: saveQuestionHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: styles.LineBreak\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.SaveTest,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Add a test title\",\n        onChange: titleHandler,\n        className: styles.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.TestButtonDiv,\n        children: /*#__PURE__*/_jsxDEV(CreateButton, {\n          clicked: submitTestHandler,\n          children: \"Save Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), questions.length < 4 ? addMoreQuestionsMessage : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TestCreator, \"qEgKLdDh9V704EupDk4lLqUjs+0=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TestCreator;\nexport default TestCreator;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestCreator\");","map":{"version":3,"sources":["/Users/davidsolsona/Documents/GitHub/Legacy/solo-project/client/src/components/Teacher/TestCreator/TestCreator.js"],"names":["React","useState","useEffect","useDispatch","CreateButton","QuestionCard","QuestionCreator","postTest","styles","TestCreator","props","questions","setQuestions","title","setTitle","isValid","setIsValid","item","JSON","parse","localStorage","getItem","setItem","stringify","storedQuestions","key","Object","keys","push","length","saveQuestionHandler","q","letters","options","map","ch","op","value","correct","newQuestion","question","answer","opt","selectedImage","files","data","FormData","append","fetch","method","body","then","res","json","image","secure_url","currentQ","currenttest","trashHandler","filter","titleHandler","e","target","dispatch","submitTestHandler","clear","history","replace","addMoreQuestionsMessage","Hidden","Warning","QuestionsList","i","Message","LineBreak","SaveTest","Title","TestButtonDiv"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport CreateButton from '../../UI/CreateButton/CreateButton';\nimport QuestionCard from './QuestionCard/QuestionCard';\nimport QuestionCreator from './QuestionCreator/QuestionCreator';\nimport { postTest } from '../../../store/actions/testActions';\n\nimport styles from './TestCreator.module.scss';\n\nconst TestCreator = props => {\n\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState('Test 1');\n  const [isValid, setIsValid] = useState(true);\n\n  useEffect(() => {\n    // Retrieve questions from storage\n    const item = JSON.parse(localStorage.getItem('currenttest'));\n    if (!item) localStorage.setItem('currenttest', JSON.stringify({}))\n    else {\n      const storedQuestions = [];\n      for (let key of Object.keys(item)) {\n        storedQuestions.push(item[key]);\n      }\n      if (storedQuestions.length) setQuestions(storedQuestions);\n    }\n  }, []);\n\n  const saveQuestionHandler = q => {\n    // Create question object\n    const letters = ['a', 'b', 'c', 'd'];\n    const options = letters.map((ch) => ({op: q[ch].value, correct: false}));\n    const newQuestion = {\n      question: q.question.value,\n      options,\n      answer: q[q.answer.value].value\n    };\n    newQuestion.options.map(opt => opt.correct = (opt.op === newQuestion.answer));\n\n    if (q.selectedImage.files[0]) {\n      // SHOW SPINNER\n      const data = new FormData();\n      data.append('file', q.selectedImage.files[0])\n      data.append('upload_preset', 'learntoday')\n      \n      fetch('https://api.cloudinary.com/v1_1/garmobal/image/upload', {\n        method: 'POST',\n        body: data})\n        .then(res => res.json())\n        .then(res => {\n          newQuestion.image = res.secure_url;\n          setQuestions(currentQ => [...currentQ, newQuestion]);\n          const currenttest = JSON.parse(localStorage.getItem('currenttest'));\n          currenttest[newQuestion.question] = newQuestion\n          localStorage.setItem('currenttest', JSON.stringify(currenttest));\n          //HIDE SPINNER\n        });\n    } else {\n      setQuestions(currentQ => [...currentQ, newQuestion]);\n      const currenttest = JSON.parse(localStorage.getItem('currenttest'));\n      currenttest[newQuestion.question] = newQuestion\n      localStorage.setItem('currenttest', JSON.stringify(currenttest));\n    }\n\n  };\n\n  const trashHandler = question => {\n    const currenttest = JSON.parse(localStorage.getItem('currenttest'));\n    delete currenttest[question];\n    localStorage.setItem('currenttest', JSON.stringify(currenttest));\n    setQuestions(questions.filter(q => q.question !== question));\n  };\n\n  const titleHandler = (e) => setTitle(e.target.value)\n\n  const dispatch = useDispatch();\n\n  const submitTestHandler = () => {\n    if (questions.length < 4) setIsValid(false);\n    else {\n      dispatch(postTest(questions, title));\n      localStorage.clear();\n      props.history.replace('/tests');\n    }\n  };\n\n  const addMoreQuestionsMessage = (<p className={isValid ? styles.Hidden : styles.Warning}>Tests must have at least 4 questions and a title</p>)\n\n  return (\n    <div className={styles.TestCreator}>\n      <div className={styles.QuestionsList}>      \n        {questions.length ? \n          questions.map((q, i) => (\n          <QuestionCard key={i} quest={q} trashHandler={trashHandler}/>\n          )) : \n          (<p className={styles.Message}>Start by adding some questions!</p>)\n          }\n      </div>\n      <QuestionCreator saveQuestion={saveQuestionHandler}/>\n      <hr className={styles.LineBreak}/>\n      <div className={styles.SaveTest}>\n          <input \n            type='text' \n            placeholder='Add a test title'\n            onChange={titleHandler}\n            className={styles.Title}/>\n        <div className={styles.TestButtonDiv}>\n          <CreateButton clicked={submitTestHandler}>Save Test</CreateButton>\n        </div>\n        {questions.length < 4 ? addMoreQuestionsMessage : null}\n      </div>\n    </div>\n  );\n};\n\nexport default TestCreator;\n"]},"metadata":{},"sourceType":"module"}