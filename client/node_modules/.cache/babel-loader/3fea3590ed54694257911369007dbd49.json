{"ast":null,"code":"import { combineReducers } from 'redux';\nimport * as actionTypes from '../actions/actionTypes';\nconst initialTests = [];\n\nconst tests = (state = initialTests, action) => {\n  switch (action.type) {\n    case actionTypes.GET_TESTS:\n      return action.payload;\n\n    case actionTypes.POST_TEST:\n      return action.payload;\n\n    case actionTypes.DELETE_TEST:\n      return state.filter(test => test._id !== action.payload);\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nconst initialRole = 'teacher';\n\nconst role = (state = initialRole, action) => {\n  switch (action.type) {\n    case actionTypes.AUTHENTIFY:\n      return action.payload.role;\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nconst initialStudentList = [];\n\nconst students = (state = initialStudentList, action) => {\n  switch (action.type) {\n    case actionTypes.GET_STUDENTS:\n      const students = action.payload.sort((a, b) => {\n        if (a.name < b.name) return -1;\n        if (a.name > b.name) return 1;else return 0;\n      });\n      return students;\n\n    case actionTypes.POST_STUDENTS:\n      const allStudents = [...state, ...action.payload].sort((a, b) => {\n        if (a.name < b.name) return -1;\n        if (a.name > b.name) return 1;else return 0;\n      });\n      return allStudents;\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nconst initalCurrentStudent = {};\n\nconst currentStudent = (state = initalCurrentStudent, action) => {\n  switch (action.type) {\n    case actionTypes.GET_STUDENT:\n      return action.payload;\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nconst initialCurrentQuizz = {};\n\nconst currentQuizz = (state = initialCurrentQuizz, action) => {\n  switch (action.type) {\n    case actionTypes.GET_CURRENTQUIZZ:\n      return action.payload;\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nconst initialProgress = [];\n\nconst progress = (state = initialProgress, action) => {\n  switch (action.type) {\n    case actionTypes.POST_CHECK_ANSWER:\n      const result = {\n        qid: action.payload.answerObject.qid,\n        option: action.payload.answerObject.answer,\n        question: action.payload.answerObject.question,\n        correct: action.payload.data\n      };\n      return [...state, result];\n\n    case actionTypes.RESET_PROGRESS:\n      return [];\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport default combineReducers({\n  tests,\n  role,\n  students,\n  currentStudent,\n  currentQuizz,\n  progress\n});","map":{"version":3,"sources":["/Users/davidsolsona/Documents/GitHub/Legacy/solo-project/client/src/store/reducers/reducers.js"],"names":["combineReducers","actionTypes","initialTests","tests","state","action","type","GET_TESTS","payload","POST_TEST","DELETE_TEST","filter","test","_id","initialRole","role","AUTHENTIFY","initialStudentList","students","GET_STUDENTS","sort","a","b","name","POST_STUDENTS","allStudents","initalCurrentStudent","currentStudent","GET_STUDENT","initialCurrentQuizz","currentQuizz","GET_CURRENTQUIZZ","initialProgress","progress","POST_CHECK_ANSWER","result","qid","answerObject","option","answer","question","correct","data","RESET_PROGRESS"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport * as actionTypes from '../actions/actionTypes';\n\nconst initialTests = [];\n\nconst tests = (state = initialTests, action) => {\n  switch (action.type) {\n    case actionTypes.GET_TESTS:\n      return action.payload;\n    case actionTypes.POST_TEST:\n      return action.payload;\n    case actionTypes.DELETE_TEST:\n      return state.filter(test => test._id !== action.payload);\n    default:\n      return state;\n  };\n};\n\nconst initialRole = 'teacher';\n\nconst role = (state = initialRole, action) => {\n  switch (action.type) {\n    case actionTypes.AUTHENTIFY:\n      return action.payload.role;\n    default:\n      return state;\n  };\n};\n\nconst initialStudentList = [];\n\nconst students = (state = initialStudentList, action) => {\n  switch (action.type) {\n    case actionTypes.GET_STUDENTS:\n      const students = action.payload.sort((a, b) => {\n        if (a.name < b.name) return -1;\n        if (a.name > b.name) return 1;\n        else return 0;\n      });\n      return students;\n    case actionTypes.POST_STUDENTS:\n      const allStudents = [...state, ...action.payload]\n        .sort((a, b) => {\n          if (a.name < b.name) return -1;\n          if (a.name > b.name) return 1;\n          else return 0;\n        });\n      return allStudents;\n    default:\n      return state;\n  };\n};\n\nconst initalCurrentStudent = {};\n\nconst currentStudent = (state = initalCurrentStudent, action) => {\n  switch (action.type) {\n    case actionTypes.GET_STUDENT:\n      return action.payload;\n    default:\n      return state;\n  };\n};\n\nconst initialCurrentQuizz = {};\n\nconst currentQuizz = (state = initialCurrentQuizz, action) => {\n  switch (action.type) {\n    case actionTypes.GET_CURRENTQUIZZ:\n      return action.payload;\n    default:\n      return state;\n  };\n};\n\nconst initialProgress = [];\n\nconst progress = (state = initialProgress, action) => {\n  switch (action.type) {\n    case actionTypes.POST_CHECK_ANSWER:\n      const result = {\n        qid: action.payload.answerObject.qid,\n        option: action.payload.answerObject.answer,\n        question: action.payload.answerObject.question,\n        correct: action.payload.data\n      };\n      return [...state, result];\n    case actionTypes.RESET_PROGRESS:\n      return [];\n    default:\n      return state;\n  };\n}\n\n\nexport default combineReducers({\n  tests,\n  role,\n  students,\n  currentStudent,\n  currentQuizz,\n  progress\n});\n"]},"metadata":{},"sourceType":"module"}