{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/davidsolsona/Documents/GitHub/Legacy/solo-project/client/src/components/Student/TestDashboard/Question/Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Answer from '../Answer/Answer';\nimport styles from './Question.module.scss';\nimport { checkUserAnswer } from '../../../../store/actions/testActions';\nimport { updateStudentResults } from '../../../../store/actions/studentListActions';\n\nconst Question = props => {\n  _s();\n\n  const [userIsAnswering, setuserIsAnswering] = useState(true);\n  const [showExit, setShowExit] = useState(false);\n  const dispatch = useDispatch();\n  const progress = useSelector(state => state.progress);\n  const student = useSelector(state => state.currentStudent); // Submit to DB to check\n\n  const submitAnswerHandler = userAnswer => {\n    const answerObject = {\n      learner: true,\n      answer: userAnswer,\n      qid: props.question._id,\n      question: props.question.question,\n      testid: props.quizz._id\n    };\n    dispatch(checkUserAnswer(answerObject));\n    setuserIsAnswering(false);\n  };\n\n  let feedbackStyle = 'waiting';\n\n  if (progress[props.currQuest]) {\n    feedbackStyle = progress[props.currQuest].correct ? 'correct' : 'incorrect';\n  } // Next Button\n\n\n  const nextButtonHandler = () => {\n    if (props.currQuest === props.quizz.questions.length - 1) {\n      setuserIsAnswering(true); // HERE\n\n      const correct = progress.filter(question => question.correct).length;\n      const completedTest = {\n        id: props.quizz._id,\n        title: props.quizz.title,\n        result: {\n          percentage: Math.round(correct / props.quizz.questions.length * 100),\n          questions: progress\n        }\n      };\n      dispatch(updateStudentResults(student._id, 'completed', completedTest));\n      props.nextButton(completedTest); // maybe tomeouthere\n      // props.history.replace('/user'); why are you not workingggg?\n    } else {\n      // if (props.currQuest === props.quizz.questions.length - 2) setShowExit(true);\n      setuserIsAnswering(true); // HERE\n\n      props.nextButton(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.Question,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: props.question.image ? styles.QuestionTitleAndImage : styles.QuestionTitle,\n      children: [props.question.question, props.question.image ? /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          height: '250px',\n          borderRadius: '10px'\n        },\n        src: props.question.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 33\n      }, this) : null, console.log(props.question)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.Options,\n      children: props.question.options.map((opt, i) => /*#__PURE__*/_jsxDEV(Answer, {\n        submitAnswerHandler: submitAnswerHandler,\n        disableButton: !userIsAnswering,\n        fb: feedbackStyle,\n        currQuest: props.currQuest,\n        children: opt\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), showExit ? /*#__PURE__*/_jsxDEV(Link, {\n      to: '/user',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.NextButtonContainer,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.NextButton,\n          onClick: nextButtonHandler,\n          disabled: userIsAnswering,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-arrow-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 10\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.NextButtonContainer,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.NextButton,\n        onClick: nextButtonHandler,\n        disabled: userIsAnswering,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-arrow-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}; // Conditionally change answers display to a single column when there are more characters.\n\n\n_s(Question, \"V9xZzZlP1P3ywSs+O/jy/g448CI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/davidsolsona/Documents/GitHub/Legacy/solo-project/client/src/components/Student/TestDashboard/Question/Question.js"],"names":["React","useState","useDispatch","useSelector","Link","Answer","styles","checkUserAnswer","updateStudentResults","Question","props","userIsAnswering","setuserIsAnswering","showExit","setShowExit","dispatch","progress","state","student","currentStudent","submitAnswerHandler","userAnswer","answerObject","learner","answer","qid","question","_id","testid","quizz","feedbackStyle","currQuest","correct","nextButtonHandler","questions","length","filter","completedTest","id","title","result","percentage","Math","round","nextButton","image","QuestionTitleAndImage","QuestionTitle","height","borderRadius","console","log","Options","options","map","opt","i","NextButtonContainer","NextButton"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport Answer from '../Answer/Answer';\nimport styles from './Question.module.scss';\nimport { checkUserAnswer } from '../../../../store/actions/testActions';\nimport { updateStudentResults } from '../../../../store/actions/studentListActions';\n\nconst Question = props => {\n\n  const [userIsAnswering, setuserIsAnswering] = useState(true);\n  const [showExit, setShowExit] = useState(false);\n\n  const dispatch = useDispatch();\n  const progress = useSelector(state => state.progress);\n  const student = useSelector(state => state.currentStudent);\n\n  // Submit to DB to check\n  const submitAnswerHandler = (userAnswer) => {\n    const answerObject = {\n      learner: true,\n      answer: userAnswer,\n      qid: props.question._id,\n      question: props.question.question,\n      testid: props.quizz._id\n    };\n    dispatch(checkUserAnswer(answerObject));\n    setuserIsAnswering(false);\n  };\n\n  let feedbackStyle = 'waiting';\n  if (progress[props.currQuest]) {\n    feedbackStyle = progress[props.currQuest].correct ? 'correct' : 'incorrect';\n  }\n\n  // Next Button\n  const nextButtonHandler = () => {\n    if (props.currQuest === props.quizz.questions.length - 1) {\n      setuserIsAnswering(true) // HERE\n\n      const correct = progress.filter(question => question.correct).length;\n      const completedTest = {\n        id: props.quizz._id,\n        title: props.quizz.title,\n        result: {\n          percentage: Math.round(correct / props.quizz.questions.length * 100),\n          questions: progress\n        }\n      };\n\n      dispatch(updateStudentResults(student._id, 'completed', completedTest));\n      props.nextButton(completedTest); // maybe tomeouthere\n      // props.history.replace('/user'); why are you not workingggg?\n    } else {\n      // if (props.currQuest === props.quizz.questions.length - 2) setShowExit(true);\n      setuserIsAnswering(true) // HERE\n      props.nextButton(false);\n    }\n  }\n\n  return (\n    <div className={styles.Question}>\n      <div className={props.question.image ? styles.QuestionTitleAndImage : styles.QuestionTitle}>\n        {props.question.question} \n        {props.question.image ? <img style={{height: '250px', borderRadius: '10px'}} src={props.question.image}/> : null}\n        {console.log(props.question)}\n      </div>\n      <div className={styles.Options}>\n        {\n          props.question.options.map((opt, i) => (\n            <Answer \n              key={i} \n              submitAnswerHandler={submitAnswerHandler}\n              disableButton={!userIsAnswering}\n              fb={feedbackStyle}\n              currQuest={props.currQuest}\n            >{opt}</Answer>\n          ))\n        }\n      </div>\n      {\n        showExit ? \n        (<Link to={'/user'}>\n          <div className={styles.NextButtonContainer}>\n            <button \n              className={styles.NextButton} onClick={nextButtonHandler} \n              disabled={userIsAnswering}\n            ><i className=\"fas fa-arrow-right\"></i></button>\n          </div>\n        </Link>) : \n        (<div className={styles.NextButtonContainer}>\n          <button \n            className={styles.NextButton} onClick={nextButtonHandler} \n            disabled={userIsAnswering}\n          ><i className=\"fas fa-arrow-right\"></i></button>\n        </div>)\n      }\n      \n    </div>\n  );\n};\n\n// Conditionally change answers display to a single column when there are more characters.\n\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}